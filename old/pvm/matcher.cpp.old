#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <vector>
#include <time.h>

#include "pstring.hpp"
#include "stack.hpp"

using namespace std;

/*
 *  Name:      matcher.cpp
 *  Author:    Herbert Lange
 *  Descriton: Matching function to match an input word
 *  with an array of possible substrings
 *
 */
  
class Pair {
public:
  Pstring syllable;
  long long int count;
  Pair(Pstring s)
  {
    syllable=s;
    count=0;
  }
};

// Approximately 85000 syllables
Pair* syllables[85000];
int map[85000];

// Memorizes the absolute count
int syllables_count;

// print usage message
void usage(char *exec)
{
  printf("Usage: %s syllable-list\n", exec);
  _exit(-1);
}

// Read the syllables from a file into the vector
void read_syllables(char *filename)
{
  // Reset counter
  syllables_count=0;
  FILE *f=fopen(filename,"r");
  // Syllables are not longer than eight characters
  char zeile[8];
  while(fscanf(f,"%s\n",zeile)>0)
    {
      syllables[syllables_count]=new Pair(Pstring(zeile));
      syllables_count++;
    }
}

void bubble_sort_map()
{
  int n=syllables_count;
  int swapped;
  clock_t t1=clock();
  do
    {
      swapped=0;
      int ct=0;
      for(ct=0;ct<n-1;ct++)
	{
	  if ((syllables[map[ct]]->count<syllables[map[ct+1]]->count)||((syllables[map[ct]]->count==syllables[map[ct+1]]->count)&&(syllables[map[ct]]->syllable.getLength()<syllables[map[ct+1]]->syllable.getLength())))
	    //if (syllables[map[ct]]->syllable.getLength()<syllables[map[ct+1]]->syllable.getLength())
	    {
	      map[ct]^=map[ct+1];
	      map[ct+1]^=map[ct];
	      map[ct]^=map[ct+1];
	      swapped=1;
	    }	 
	}
      if (n%1000==0)
	{
	  clock_t t2=clock();
#ifdef DEBUG
	  printf("%d elements left to sort, %f\n",n,((float)t2-(float)t1)/CLOCKS_PER_SEC);
#endif
	  //t1=clock();
	}
      n=n-1;
    }
  while(swapped==1);
}
/*
int divide(Pair *l, Pair *r)
{
  int i=l->count;
  int j=r->count-1;
  Pair *pivot=r;
  do
    {
      while(((syllables[map[i]]->count<pivot->count)||((syllables[map[i]]->count==pivot->count)&&(syllables[map[i]]->syllable.getLength()<pivot->syllable.getLength())))&&(i<r->count))
	{
	  i++;
	}
      while(((syllables[map[j]]->count>=pivot->count)||((syllables[map[j]]->count==pivot->count)&&(syllables[map[j]]->syllable.getLength()>=pivot->syllable.getLength())))&&(j>l->count))
	{
	  j--;
	}
      if(i<j)
	{
	  map[i]^=map[j];
	  map[j]^=map[i];
	  map[i]^=map[j];
	}
    }
  while(i<j);
	if((syllables[map[i]]->count>pivot->count)||((syllables[map[i]]->count==pivot->count)&&(syllables[map[i]]->syllable.getLength()>pivot->syllable.getLength())))
	  {
	    
	  }

}
void qs(Pair *l, Pair *r)
{
  if ((l->count<r->count)||((l->count==r->count)&&(l->syllable.getLength()<r->syllable.getLength())))
    {
      int div=divide(l,r);
      qs(l,syllables[div-1]);
      qs(syllables[div+1],r);
    }
}

void quick_sort_map()
{
  int n=syllables_count;
  qs(syllables[0],syllables[n-1]);
}*/


// Sort the mapping so that frequent syllables are preferred to infrequent and longer syllables to shorer
void sort_map()
{
  bubble_sort_map();
  //quick_sort_map();
}

void match(Pstring* word, int score)
{
  // Stack for the positions and syllable number
  Stack<int> history;
  int curpos=0;
  int start=0;
  start=0;
  curpos=0;
#ifdef DEBUG
  printf("Trying to match %.*s at %p\n",word->getLength(),word->getValue(),&(word->value));
#endif
    while (curpos!=word->getLength())
    {
      int ct;
      int match=0;
      for (ct=start;ct<syllables_count;ct++)
	{
#ifdef DEBUG
	  printf("Trying syllable %d - %.*s\n",ct, syllables[map[ct]]->syllable.getLength(), syllables[map[ct]]->syllable.getValue());
#endif
	  // Syllable is prefix of the substring starting at curpos
	  if (strncmp(&((word->getValue())[curpos]),syllables[map[ct]]->syllable.getValue(),syllables[map[ct]]->syllable.getLength())==0)
	    {
	      match=1;
#ifdef DEBUG
	      printf("Matched syllable %.*s at position %d\n",syllables[map[ct]]->syllable.getLength(),syllables[map[ct]]->syllable.getValue(),curpos);
#endif
	      history.push(curpos);
	      history.push(ct);
	      curpos=curpos+syllables[map[ct]]->syllable.getLength();
	      break;
	    }
	}
      // No matching syllable found -> backtracking
      if (match==0)
	{
	  start=history.pop()+1;
	  curpos=history.pop();
#ifdef DEBUG
	  printf("Backtrack to syllable %d at position %d\n",start,curpos);
#endif
	}
      // Start again with first syllable
      else
	start=0;
    }
#ifdef DEBUG
  printf("Clean history\n");
#endif
  while(history.getCount()>0)
    { 
      // get the syllable number
      int pos=history.pop();
      // ignore the saved string position
      history.pop();
      int oldcount=syllables[map[pos]]->count;
      syllables[map[pos]]->count+=score;
      if (oldcount>syllables[map[pos]]->count)
	{
	  perror("Ãœberlauf: Feuer Feuer Feuer\n");
	}
    }
  sort_map();
}

void init_matcher(char *silbenliste)
//int main(int argc,char **argv)
{
  // No syllable list given
  //if (argc<=1)
  //  usage(argv[0]);
  int ct;
  // read syllables from file
  printf("Reading syllable list\n");
  //read_syllables(argv[1]);
  read_syllables(silbenliste);
  for(ct=0;ct<syllables_count;ct++)
    {
      map[ct]=ct;
    }	     
  /*  char *line=(char *)malloc(255);
  Pstring pline;
  ct=0;*/
  printf("Sorting map\n");
  sort_map();
  /*  printf("Waiting for input\n");
  while(1)
    {
      scanf("%s",line);
      Pstring pline(line);
#ifdef DEBUG
      printf("%p %p\n",&pline.length,pline.value);
#endif
      printf("Matching\n");
      match(&pline,ct);
      ct++;
      int ct2;
      for (ct2=0;ct2<syllables_count;ct2++)
	{
	  printf("%d\t%.*s\t%d\n",ct2,syllables[map[ct2]]->syllable.getLength(),syllables[map[ct2]]->syllable.getValue(),syllables[map[ct2]]->count);
	  }
    }
  free(line);
  return 0;*/
}
